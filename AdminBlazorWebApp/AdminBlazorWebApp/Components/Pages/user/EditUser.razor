@page "/users/edit/{Id}"
@using System.Net.Http.Json
@using AdminBlazorWebApp.Data
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IConfiguration Configuration
<PageTitle>Edit @user?.UserName</PageTitle>

@rendermode InteractiveServer


<div class="container">
    <h3>Edit User</h3>

    @if (error != null)
    {
        <p class="text-danger">@error</p>
    }
    else if (user == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="userEdit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="userName">Username</label>
                <InputText id="userName" class="form-control" @bind-Value="user.UserName" />
            </div>
            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="user.FirstName" />
            </div>
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="user.LastName" />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="user.Email" />
            </div>
            <div class="form-group">
                <label for="biography">Biography</label>
                <InputText id="biography" class="form-control" @bind-Value="user.Biography" />
            </div>
            <div class="form-group">
                <label for="profileImg">Profile Image</label>
                <InputText id="profileImg" class="form-control" @bind-Value="user.ProfileImg" />
            </div>
            <div class="form-group">
                <label>
                    <InputCheckbox @bind-Value="user.IsSubscribed" />
                    Subscribed to newsletter
                </label>
            </div>
            <div class="form-group">
                <label for="notificationEmail">Notification Email</label>
                <InputText id="notificationEmail" class="form-control" @bind-Value="user.NotificationEmail" />
            </div>

            <h4>Address</h4>
            @if (user.Address != null)
            {
                <div class="form-group">
                    <label for="addressLine1">Address Line 1</label>
                    <InputText id="addressLine1" class="form-control" @bind-Value="user.Address.AddressLine_1" />
                </div>
                <div class="form-group">
                    <label for="addressLine2">Address Line 2</label>
                    <InputText id="addressLine2" class="form-control" @bind-Value="user.Address.AddressLine_2" />
                </div>
                <div class="form-group">
                    <label for="postalCode">Postal Code</label>
                    <InputText id="postalCode" class="form-control" @bind-Value="user.Address.PostalCode" />
                </div>
                <div class="form-group">
                    <label for="city">City</label>
                    <InputText id="city" class="form-control" @bind-Value="user.Address.City" />
                </div>
            }
            else
            {
                <p>No address information available for this user.</p>
                <button type="button" class="btn btn-secondary" @onclick="InitializeAddress">Add Address</button>
            }

            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private ApplicationUserForUser? user;
    private string?error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            var apiUrl = $"{Configuration["GetUserAPI"]}{Id}{Configuration["GetUserAPIFunctionKey"]}";
            user = await Http.GetFromJsonAsync<ApplicationUserForUser>(apiUrl);
            if (user == null)
            {
                error = "User not found.";
                return;
            }

            // Initialize Address if it's null
            if (user.Address == null)
            {
                user.Address = new AddressEntity();
            }
        }
        catch (Exception ex)
        {
            error = $"Error fetching user data. {ex.Message}";
        }
    }

    private void InitializeAddress()
    {
        if (user?.Address == null)
        {
            user!.Address = new AddressEntity();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var apiUrl = $"{Configuration["UpdateUserAPI"]}{user!.Id}{Configuration["UpdateUserAPIFunctionKey"]}";
            var response = await Http.PutAsJsonAsync(apiUrl, user);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/users");
            }
            else
            {
                error = $"Failed to update user. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            error = $"Unexpected error: {ex.Message}";
        }
    }
}