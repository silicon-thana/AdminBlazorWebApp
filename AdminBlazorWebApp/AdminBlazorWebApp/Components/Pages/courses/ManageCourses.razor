@page "/courses"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer
<PageTitle>Manage Courses</PageTitle>


<div class="container">
    <h3>Courses</h3>
    <button class="btn btn-success mb-3" @onclick="CreateCourse">
        <i class="fas fa-plus"></i> Add Course
    </button>
    @if (error != null)
    {
        <p class="text-danger">@error</p>
    }
    else if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var course in courses)
            {
                <div class="col-md-4">
                    <div class="card mb-4">
                        <img src="@course.ImageUri" class="card-img-top" alt="@course.Title" />
                        <div class="card-body">
                            <h5 class="card-title">@course.Title</h5>
                            <button class="btn btn-primary" @onclick="() => EditCourse(course.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCourse(course.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Course>? courses;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        try
        {
            var apiUrl = "https://courseprovider-silicon-thanakorn.azurewebsites.net/api/graphql?code=t-uUZAYLh4S-n5ibPELeB66J327bj1C17cBG_leWlJKIAzFuL5TYxA%3D%3D";
            var query = new
            {
                query = "{ getCourses { id title imageUri } }"
            };

            var response = await Http.PostAsJsonAsync(apiUrl, query);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<GraphQLResponse<GraphQLData>>();
                courses = result?.Data?.GetCourses;
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                error = $"Error loading courses: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error loading courses: {ex.Message}";
        }
    }

    private void EditCourse(string id)
    {
        Navigation.NavigateTo($"/editcourse/{id}");
    }

    private void CreateCourse()
    {
        Navigation.NavigateTo("/createcourse");
    }

    private async Task DeleteCourse(string id)
    {
        try
        {
            var apiUrl = "https://courseprovider-silicon-thanakorn.azurewebsites.net/api/graphql?code=t-uUZAYLh4S-n5ibPELeB66J327bj1C17cBG_leWlJKIAzFuL5TYxA%3D%3D";
            var mutation = new
            {
                query = @"mutation($id: String!) {
                    deleteCourse(id: $id)
                }",
                variables = new { id }
            };

            var response = await Http.PostAsJsonAsync(apiUrl, mutation);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<GraphQLResponse<DeleteCourseResponse>>();
                if (result?.Data?.DeleteCourse == true)
                {
                    courses = courses?.Where(c => c.Id != id).ToList();
                }
                else
                {
                    error = "Error deleting course: Course not found.";
                }
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                error = $"Error deleting course: {responseContent}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error deleting course: {ex.Message}";
        }
    }

    public class Course
    {
        public string Id { get; set; } = null!;
        public string Title { get; set; } = null!;
        public string ImageUri { get; set; } = null!;
    }

    public class GraphQLResponse<T>
    {
        public T Data { get; set; } = default!;
    }

    public class GraphQLData
    {
        public List<Course> GetCourses { get; set; } = new();
    }

    public class DeleteCourseResponse
    {
        [JsonPropertyName("deleteCourse")]
        public bool DeleteCourse { get; set; }
    }
}
